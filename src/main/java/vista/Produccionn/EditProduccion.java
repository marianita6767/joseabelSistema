/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vista.Produccionn;

import java.awt.Frame;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import modelo.Conexion;
import java.text.SimpleDateFormat;
import java.text.ParseException;

/**
 *
 * @author pc
 */
public class EditProduccion extends javax.swing.JDialog {

    private Produccion produccionPanel;
    private int idProduccionActual;
    private int idProduccion;
    private boolean datosModificados = false;

    /**
     * Creates new form EditTresProduccion
     */
    public EditProduccion(Frame parent, boolean modal, int idProduccion) {
        super(parent, modal);
        initComponents();
        this.idProduccion = idProduccion;
        setLocationRelativeTo(parent);

        // Si se pasa un ID válido, cargar los datos automáticamente
        if (idProduccion > 0) {
            cargarDatosProduccion(idProduccion);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Boxestado = new RSMaterialComponent.RSComboBoxMaterial();
        txtinicio = new com.toedter.calendar.JDateChooser();
        txtfinal = new com.toedter.calendar.JDateChooser();
        btnGuardar1 = new rojeru_san.RSButtonRiple();
        btnCancelar1 = new rojeru_san.RSButtonRiple();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(46, 49, 82));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century751 BT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Produccion");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 50));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel6.setText("fecha final:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel9.setText("Estado:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel10.setText("fecha inicial:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        Boxestado.setForeground(new java.awt.Color(102, 102, 102));
        Boxestado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar", "pendiente", "proceso", "finalizado" }));
        Boxestado.setFont(new java.awt.Font("Roboto Bold", 0, 14)); // NOI18N
        Boxestado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxestadoActionPerformed(evt);
            }
        });
        jPanel1.add(Boxestado, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 190, -1));

        txtinicio.setBackground(new java.awt.Color(255, 255, 255));
        txtinicio.setForeground(new java.awt.Color(255, 255, 255));
        txtinicio.setDateFormatString("y-MM-d");
        txtinicio.setMaxSelectableDate(new java.util.Date(253370786472000L));
        jPanel1.add(txtinicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 190, 30));

        txtfinal.setBackground(new java.awt.Color(255, 255, 255));
        txtfinal.setForeground(new java.awt.Color(255, 255, 255));
        txtfinal.setDateFormatString("y-MM-d");
        jPanel1.add(txtfinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 190, 30));

        btnGuardar1.setBackground(new java.awt.Color(46, 49, 82));
        btnGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus (2).png"))); // NOI18N
        btnGuardar1.setText("Guardar");
        btnGuardar1.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        btnGuardar1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, 140, -1));

        btnCancelar1.setBackground(new java.awt.Color(46, 49, 82));
        btnCancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salida (1).png"))); // NOI18N
        btnCancelar1.setText("Volver");
        btnCancelar1.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        btnCancelar1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BoxestadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxestadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxestadoActionPerformed

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
// 1. Mostrar diálogo de confirmación
        alertaa confirmDialog = new alertaa(
                (Frame) this.getParent(),
                true,
                "Confirmar",
                "¿Desea guardar los datos?"
        );
        confirmDialog.setVisible(true);

        // 2. Si el usuario no confirma, salir
        if (!confirmDialog.opcionConfirmada) {
            return;
        }

        // 3. Validación de campos
        if (txtinicio.getDate() == null || txtfinal.getDate() == null
                || Boxestado.getSelectedItem() == null || Boxestado.getSelectedIndex() == 0) {
            new espacio_alerta((Frame) this.getParent(), true, "Error", "Todos los campos son obligatorios").setVisible(true);
            return;
        }

        try {
            // 4. Obtener valores
            Date fechaInicio = new Date(txtinicio.getDate().getTime());
            Date fechaFin = new Date(txtfinal.getDate().getTime());
            String estado = Boxestado.getSelectedItem().toString();

            // 5. Validar fechas
            if (fechaFin.before(fechaInicio)) {
                new Error_fecha((Frame) this.getParent(), true, "Error", "La fecha final no puede ser anterior a la inicial").setVisible(true);
                return;
            }

            // 6. Conexión y operación en BD
            try (Connection con = Conexion.getConnection()) {
                if (idProduccionActual == 0) {
                    // Insertar nuevo registro
                    try (PreparedStatement ps = con.prepareStatement(
                            "INSERT INTO produccion (fecha_inicio, fecha_fin, estado) VALUES (?, ?, ?)")) {
                        ps.setDate(1, fechaInicio);
                        ps.setDate(2, fechaFin);
                        ps.setString(3, estado);
                    }
                } else {
                    // Actualizar registro existente
                    try (PreparedStatement ps = con.prepareStatement(
                            "UPDATE produccion SET fecha_inicio = ?, fecha_fin = ?, estado = ? WHERE id_produccion = ?")) {
                        ps.setDate(1, fechaInicio);
                        ps.setDate(2, fechaFin);
                        ps.setString(3, estado);
                        ps.setInt(4, idProduccionActual);
                        ps.executeUpdate();
                    }
                }

                // Marcar que los datos fueron modificados
                this.datosModificados = true;

                // 7. Mostrar mensaje de éxito
                if (idProduccionActual == 0) {
                    new Datos_guardados(
                            (Frame) this.getParent(),
                            true,
                            "Éxito",
                            "Datos guardados correctamente"
                    ).setVisible(true);
                } else {
                    new DatosActualizados(
                            (Frame) this.getParent(),
                            true,
                            "Éxito",
                            "Datos actualizados correctamente"
                    ).setVisible(true);
                }

                // 8. Cerrar el diálogo
                this.dispose();
            }
        } catch (SQLException e) {
            new Error_guardar((Frame) this.getParent(), true, "Error",
                    "Error al guardar: " + e.getMessage()).setVisible(true);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private void btnCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormuEtapaProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private Produccion produccionPanel;
            private int idProduccion;

            @Override
            public void run() {
                FormuEtapaProduccion dialog = new FormuEtapaProduccion(new javax.swing.JFrame(), true, this.idProduccion);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSComboBoxMaterial Boxestado;
    private rojeru_san.RSButtonRiple btnCancelar1;
    private rojeru_san.RSButtonRiple btnGuardar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.toedter.calendar.JDateChooser txtfinal;
    private com.toedter.calendar.JDateChooser txtinicio;
    // End of variables declaration//GEN-END:variables
public void setDatos(int idProduccion, String nombre, String fechaInicio, 
                   String fechaFin, String estado, int cantidad, String dimensiones) {
    this.idProduccion = idProduccion;
    this.datosModificados = false; // Resetear el estado de modificaciones
    
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        
        // Fecha inicio
        if (fechaInicio != null && !fechaInicio.isEmpty()) {
            txtinicio.setDate(sdf.parse(fechaInicio));
        }
        
        // Fecha fin (puede ser "En proceso")
        if (fechaFin != null && !fechaFin.isEmpty() && !fechaFin.equals("En proceso")) {
            txtfinal.setDate(sdf.parse(fechaFin));
        }
        
        // Estado
        if (estado != null && !estado.isEmpty()) {
            Boxestado.setSelectedItem(estado);
        }
        
        
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, 
            "Error al parsear fechas: " + e.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void cargarDatosProduccion(int idProduccion) {
        try (Connection con = Conexion.getConnection(); PreparedStatement ps = con.prepareStatement(
                "SELECT p.id_produccion, dp.descripcion, p.fecha_inicio, "
                + "p.fecha_fin, p.estado, dp.cantidad, dp.dimension "
                + "FROM produccion p "
                + "JOIN detalle_pedido dp ON p.detalle_pedido_iddetalle_pedido = dp.iddetalle_pedido "
                + "WHERE p.id_produccion = ?")) {

            ps.setInt(1, idProduccion);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    // ... procesar resultados ...
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar datos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
private boolean validarFechas(Date fechaInicio, Date fechaFin) {
    if (fechaInicio == null || fechaFin == null) {
        return false;
    }
    
    // La fecha final no puede ser anterior a la inicial
    if (fechaFin.before(fechaInicio)) {
        new Error_fecha((Frame) this.getParent(), true, 
            "Error", "La fecha final no puede ser anterior a la inicial").setVisible(true);
        return false;
    }
    
    // Puedes agregar más validaciones según tus necesidades
    return true;
}
    public boolean datosModificados() {

        return this.datosModificados;
    }

}
